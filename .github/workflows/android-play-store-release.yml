name: Android Play Store Release

on:
  workflow_dispatch:
    inputs:
      track:
        type: choice
        description: 'Google Play Store track'
        required: true
        default: 'internal'
        options:
          - internal
          - alpha
          - beta
          - production

env:
  FLUTTER_VERSION: 3.29.1
  JAVA_VERSION: '17'
  PACKAGE_NAME: com.ashhas.gamewatch
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  build:
    name: Build Android App Bundle
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2)
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from pubspec.yaml"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Create env.json
        run: |
          mkdir -p env
          echo '${{ secrets.ENV_JSON }}' > env/env.json

      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks

      - name: Create key.properties
        run: |
          cat > android/key.properties <<EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore.jks
          EOF

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run tests
        run: flutter test
        continue-on-error: false

      - name: Build App Bundle
        run: |
          flutter build appbundle --release

          # Verify AAB was created
          if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "Error: AAB file not found"
            exit 1
          fi

          echo "AAB size: $(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)"

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle-${{ steps.version.outputs.version }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Build Summary
        run: |
          echo "## Build Complete âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact:** app-bundle-${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to Play Store
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: play-store-${{ github.event.inputs.track }}
    steps:
      - name: Download AAB artifact
        uses: actions/download-artifact@v4
        with:
          name: app-bundle-${{ needs.build.outputs.version }}

      - name: Verify AAB file
        run: |
          if [ ! -f "app-release.aab" ]; then
            echo "Error: AAB file not found after download"
            echo "Available files:"
            ls -la
            exit 1
          fi
          echo "AAB file verified: $(du -h app-release.aab | cut -f1)"

      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: ${{ env.PACKAGE_NAME }}
          releaseFiles: app-release.aab
          track: ${{ github.event.inputs.track }}
          status: draft
          changesNotSentForReview: true

      - name: Deployment Summary
        run: |
          echo "## Deployment Complete ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Track:** ${{ github.event.inputs.track }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Draft (requires manual review in Play Console)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Google Play Console](https://play.google.com/console)" >> $GITHUB_STEP_SUMMARY
          echo "2. Review the draft release" >> $GITHUB_STEP_SUMMARY
          echo "3. Submit for review when ready" >> $GITHUB_STEP_SUMMARY