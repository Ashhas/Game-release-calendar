name: Firebase App Distribution

on:
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        description: 'Release notes for testers'
        required: false
        default: 'New test build'

env:
  flutter_version: 3.29.1

jobs:
  build-and-distribute:
    name: Build & Distribute to Firebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

          # Extract build number from version (e.g., 1.0.0+2 -> 2)
          BUILD_NUMBER=$(echo $VERSION | cut -d'+' -f2)
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.flutter_version }}
          cache: true

      - name: Create env.json
        run: |
          mkdir -p env
          echo '${{ secrets.ENV_JSON }}' > env/env.json

      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks

      - name: Create key.properties
        run: |
          cat > android/key.properties <<EOF
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore.jks
          EOF

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run tests
        run: flutter test
        continue-on-error: false

      - name: Build APK
        run: |
          flutter build apk --release

          # Verify APK was created
          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "Error: APK file not found"
            exit 1
          fi

          echo "APK size: $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)"

      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          releaseNotes: |
            Version: ${{ steps.version.outputs.version }}
            ${{ github.event.inputs.release_notes }}

            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Author: ${{ github.actor }}
          releaseNotesFile: ''
          file: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk-${{ steps.version.outputs.version }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 14

      - name: Summary
        run: |
          echo "## Firebase Distribution Complete ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** ${{ steps.version.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Notes:** ${{ github.event.inputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "APK uploaded to Firebase App Distribution. Add testers in the Firebase Console." >> $GITHUB_STEP_SUMMARY